`timescale 1ns/10ps

module tb;
    parameter ADDRESS_WIDTH     = 4;
    parameter NEXT_TAG_WIDTH    = 4;
    parameter BITWIDTH          = 16;
    parameter CLK_PERIOD        = 10;

    // Clock and reset ports
    reg                                 rstb;
    reg                                 clk;

    // Scan chain configuration
    reg                                 program;
    reg  [ADDRESS_WIDTH-1:0]            scan_chain_in;
    wire [ADDRESS_WIDTH-1:0]            scan_chain_out;

    // Incoming data side (coming into conroller)
    reg                                 controller_enable;
    wire                                controller_ready;
    reg  [ADDRESS_WIDTH-1:0]            tag;
    wire [NEXT_TAG_WIDTH+BITWIDTH-1:0]  input_value;    // Connection to module
    reg  [BITWIDTH-1:0]                 mc_input_value; // Source of input value
    
    // Outgoing data side (to PE or other bus)
    wire                                target_enable;
    reg                                 target_ready;
    wire [NEXT_TAG_WIDTH+BITWIDTH-1:0]  output_value;
    reg  [NEXT_TAG_WIDTH-1:0]           next_tag_id;    // Tag address to pass on

    // Test a forward value-passing controller
    multicast_controller #(
        .ADDRESS_WIDTH  (ADDRESS_WIDTH),
        .BITWIDTH       (NEXT_TAG_WIDTH+BITWIDTH)
    )
    mc (
        .clk                (clk),
        .rstb               (rstb),
        .program            (program),
        .scan_tag_in        (scan_chain_in),
        .scan_tag_out       (scan_chain_out),
        .controller_enable  (controller_enable),
        .controller_ready   (controller_ready),
        .tag                (tag),
        .input_value        (input_value),
        .target_ready       (target_ready),
        .output_value       (output_value),
    );

    always #(CLK_PERIOD) clk = ~clk;
    
    // The value 'passed' through is bidrectional. Split the wire in two
    // parts: one containing the value to be passed to the output, but also
    // another containing the tag ID for other controllers backwards on the
    // chain
    assign input_value[BITWIDTH-1:0] = mc_input_value;
    assign output_value[NEXT_TAG_WIDTH+BITWIDTH-1:BITWIDTH] = next_tag_id;

    integer i;

    initial begin
        clk             <= 'b0;
        rstb            <= 'b1;
        program         <= 'b0;
        controller_enable          <= 'b0;
        target_ready      <= 'b0;
        tag             <= 'd0;
        tag_id          <= 'd0;
        mc_input_value  <= 'd0;
        next_tag_id     <= 'd0;

        repeat (1) @(posedge clk);

        // Test scan chain input/output
        $display("Programming...");
        program         <= 'b1;
        for (i = 0; i < 4; i=i+1) begin
            tag_id      <= i;
            repeat(1) @(posedge clk);
            $display("Programmed ID: ", mc.tag_id_reg,
                "\nScan chain ID output: ", scan_chain_out);
        end
        
        program         <= 'b0;
        $display("Programmed ID: ", mc.tag_id_reg);
        
        controller_enable          <= 'd1;
        target_ready      <= 'd1;
        
        repeat(1) @(posedge clk);
        
        tag             <= 'd2; // Should do nothing...
        mc_input_value  <= 'd512;
        next_tag_id     <= 'd1;
        repeat(1) @(posedge clk);
        #1; $display("\nTag: ", tag, "\t Input Value: ", mc_input_value);
        $display("Unit Enable: ", target_enable,
            "\nNext Tag ID: ", output_value[NEXT_TAG_WIDTH+BITWIDTH-1:BITWIDTH],
            "\tOutput Value: ", output_value[BITWIDTH-1:0]);
        
        tag             <= 'd3; // ID should match
        mc_input_value  <= 'd257;
        next_tag_id     <= 'd2;
        repeat(1) @(posedge clk);
        #1; $display("\nTag: ", tag, "\t Input Value: ", mc_input_value);
        $display("Unit Enable: ", target_enable,
            "\nNext Tag ID: ", output_value[NEXT_TAG_WIDTH+BITWIDTH-1:BITWIDTH],
            "\tOutput Value: ", output_value[BITWIDTH-1:0]);
        
        tag             <= 'd4; // Should do nothing...
        mc_input_value  <= 'd33;
        next_tag_id     <= 'd3;
        repeat(1) @(posedge clk);
        #1; $display("\nTag: ", tag, "\t Input Value: ", mc_input_value);
        $display("Unit Enable: ", target_enable,
            "\nNext Tag ID: ", output_value[NEXT_TAG_WIDTH+BITWIDTH-1:BITWIDTH],
            "\tOutput Value: ", output_value[BITWIDTH-1:0]);
        
        $display("\n");
        #1 $finish;

    end

endmodule
